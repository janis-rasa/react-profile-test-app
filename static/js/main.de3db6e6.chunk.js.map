{"version":3,"sources":["serviceWorker.js","api/api.js","redux/profile-reducer.js","redux/redux-store.js","components/NotFound/NotFound.jsx","redux/profile-selectors.js","components/ProfileItem/ProfileAdditionalItems.jsx","components/ProfileItem/ProfileItem.jsx","components/Profiles/ProfileList.jsx","components/Profiles/ProfilesContainer.jsx","components/User/User.jsx","components/User/UserContainer.jsx","components/Home/Home.jsx","components/App/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","instance","axios","create","baseURL","profileAPI","userId","get","initialState","profiles","userProfile","profileReducer","state","action","type","reducers","combineReducers","profile","store","createStore","applyMiddleware","thunkMiddleware","NotFound","props","Jumbotron","Button","as","NavLink","to","variant","getProfiles","getUserProfile","ProfileAdditionalItems","Table","striped","hover","className","status","href","contacts","website","gender","ProfileItem","ProfileAvatar","src","avatarUrl","alt","name","Card","Body","id","Text","email","ProfileList","map","key","connect","requestProfiles","dispatch","a","response","data","length","alert","React","useEffect","Object","keys","User","compose","requestUserProfile","withRouter","parseInt","params","Home","Nav","Item","Link","App","path","render","ProfilesContainer","exact","ReactDOM","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de3db6e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create(\r\n    {\r\n        baseURL: 'http://my-json-server.typicode.com/janis-rasa/demo/'\r\n    }\r\n)\r\n\r\nexport const profileAPI = {\r\n    getProfileData(userId) {\r\n        return instance.get(`profiles_ext/${userId}`)\r\n    },\r\n    getProfiles() {\r\n        return instance.get(\"profiles\")\r\n    }\r\n}","import { profileAPI } from '../api/api'\r\n\r\nconst SET_PROFILE_LIST = 'SET_PROFILE_LIST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\n\r\nconst initialState = {\r\n\tprofiles: [],\r\n\tuserProfile: {}\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n\r\n\tswitch (action.type) {\r\n\t\t\r\n\t\tcase SET_PROFILE_LIST:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tprofiles: [\r\n\t\t\t\t\t...action.profiles\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t\r\n\t\tcase SET_USER_PROFILE:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tuserProfile: action.userProfile\r\n\t\t\t}\r\n\t\t\r\n\t\tdefault:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setProfiles = (profiles) => ({\r\n\ttype: SET_PROFILE_LIST,\r\n\tprofiles: profiles\r\n})\r\n\r\nconst setUserProfile = (userProfile) => ({\r\n\ttype: SET_USER_PROFILE,\r\n\tuserProfile: userProfile\r\n})\r\n\r\nexport const requestProfiles = () => async (dispatch) => {\r\n\ttry {\r\n\t\t// request a list with short profile info\r\n\t\tlet response = await profileAPI.getProfiles()\r\n\t\tif (response.data.length) {\r\n\t\t\tdispatch(setProfiles(response.data))\r\n\t\t}\r\n\t} catch (error) {\r\n\t\talert(error)\r\n\t}\r\n}\r\n\r\nexport const requestUserProfile = (userId) => async (dispatch) => {\r\n\ttry {\r\n\t\t// request full user profile\r\n\t\tlet response = await profileAPI.getProfileData(userId)\r\n\t\tif (response.data.id) {\r\n\t\t\tdispatch(setUserProfile(response.data))\r\n\t\t}\r\n\t} catch (error) {\r\n\t\talert(error)\r\n\t}\r\n}\r\n\r\nexport default profileReducer","import { applyMiddleware, combineReducers, createStore } from \"redux\"\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport profileReducer from './profile-reducer'\r\n\r\nlet reducers = combineReducers({\r\n    profile: profileReducer\r\n})\r\n\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import React from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n\r\nconst NotFound = (props) => {\r\n\r\n    return (\r\n        <>\r\n            <Jumbotron>\r\n                <h1>404. Page not found!</h1>\r\n                <p>\r\n                    Sorry, page not found\r\n  </p>\r\n                <p>\r\n                    <Button as={NavLink} to=\"/\" variant=\"primary\">Home page</Button>\r\n                </p>\r\n            </Jumbotron>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NotFound","export const getProfiles = (state) => {\r\n    return state.profile.profiles\r\n}\r\n\r\nexport const getUserProfile = (state) => {\r\n    return state.profile.userProfile\r\n}\r\n","import React from \"react\"\r\nimport Table from \"react-bootstrap/Table\"\r\n\r\nconst ProfileAdditionalItems = ({ userProfile }) => {\r\n    return (\r\n        <Table striped hover className=\"mb-0\">\r\n            <tbody>\r\n                <tr>\r\n                    <td>Status</td><td>{userProfile.status.status}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Website</td><td><a href=\"{userProfile.profile.contacts.website}\">{userProfile.profile.contacts.website}</a></td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Gender</td><td>{userProfile.profile.gender}</td>\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default ProfileAdditionalItems","import React from \"react\"\r\nimport { Card } from \"react-bootstrap\"\r\nimport { NavLink } from 'react-router-dom'\r\nimport ProfileAdditionalItems from './ProfileAdditionalItems'\r\n\r\nconst ProfileItem = ({ userProfile }) => {\r\n\r\n    const ProfileAvatar = () => <img src={userProfile.avatarUrl} alt={`${userProfile.name} avatar`} className=\"img-fluid\" />\r\n\r\n    return (\r\n        <div className=\"col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5 py-3\">\r\n            <Card>\r\n                <Card.Body>\r\n                    <div className=\"row\">\r\n                        \r\n                        <figure className=\"col-4 mb-0\" >\r\n                            \r\n                            {userProfile.profile ? <ProfileAvatar /> : <NavLink to={`/profiles/${userProfile.id}`} className=\"d-block\"><ProfileAvatar /></NavLink>}\r\n                                \r\n                        </figure>\r\n\r\n                        <Card.Text className=\"col-8 d-flex flex-column\">\r\n                            <span>{userProfile.name}</span>\r\n                            <a href={`mailto:${userProfile.email}`}>{userProfile.email}</a>\r\n                        </Card.Text>\r\n\r\n                    </div>\r\n                    \r\n                    {userProfile.profile ? <ProfileAdditionalItems userProfile={userProfile} /> : null}\r\n\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ProfileItem","import React from \"react\"\r\nimport ProfileItem from \"../ProfileItem/ProfileItem\"\r\n\r\nconst ProfileList = (props) => {\r\n    return (\r\n        <>\r\n            <h1 className=\"text-center mb-5\">Profile list</h1>\r\n\r\n            <div className=\"row justify-content-center flex-column align-items-center\">\r\n                {props.profiles.map(profile => {\r\n                    return <ProfileItem\r\n                        userProfile={profile}\r\n                        key={profile.id}\r\n                    />\r\n                })}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default ProfileList","import React from 'react'\nimport { getProfiles } from '../../redux/profile-selectors'\nimport { connect } from \"react-redux\"\nimport { requestProfiles } from '../../redux/profile-reducer'\nimport ProfileList from './ProfileList'\n\nconst ProfileContainer = (props) => {\n\n  const { requestProfiles } = props\n\n  React.useEffect(() => {\n    // AJAX load user list\n    requestProfiles()\n  }, [requestProfiles])\n\n  // Waiting for data to load and then rendering the component\n  return Object.keys(props.profiles).length ? <ProfileList profiles={props.profiles}/> : null\n\n}\n\nconst mapStateToProps = (state) => ({\n  profiles: getProfiles(state)\n})\n\nexport default connect(mapStateToProps, { requestProfiles })(ProfileContainer)\n\n","import React from 'react'\r\nimport ProfileItem from '../ProfileItem/ProfileItem'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst User = ({ userProfile }) => {\r\n\r\n    return (\r\n        <div className=\"row justify-content-center flex-column align-items-center\">\r\n            <ProfileItem userProfile={userProfile} />\r\n            <div className=\"col-12 text-center pt-3\">\r\n                <Button as={NavLink} to=\"/profiles\">Return to profile list</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User","import React from 'react'\r\nimport { getUserProfile } from '../../redux/profile-selectors'\r\nimport { connect } from \"react-redux\"\r\nimport { requestUserProfile } from '../../redux/profile-reducer'\r\nimport User from './User'\r\nimport { withRouter } from \"react-router-dom\"\r\nimport { compose } from \"redux\"\r\n\r\nconst UserContainer = (props) => {\r\n\r\n    const { requestUserProfile, match } = props\r\n    \r\n    React.useEffect(() => {\r\n        // AJAX load user data\r\n        requestUserProfile(parseInt(match.params.userId))\r\n    }, [requestUserProfile, match])\r\n\r\n\r\n    // Check the user ID and return the component with the correct data\r\n    return props.userProfile.id === parseInt(match.params.userId) ? <User userProfile={props.userProfile} /> : null\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    userProfile: getUserProfile(state)\r\n})\r\n\r\nexport default compose(connect(mapStateToProps, { requestUserProfile }), withRouter)(UserContainer)\r\n\r\n","import React from 'react'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <>\r\n            <h1 className=\"text-center\">Home page</h1>\r\n            <Nav variant=\"pills\">\r\n                <Nav.Item>\r\n                    <Nav.Link as={NavLink} to=\"/profiles\">Profile list</Nav.Link>\r\n                </Nav.Item>\r\n            </Nav>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport NotFound from \"../NotFound/NotFound\"\r\nimport ProfilesContainer from '../Profiles/ProfilesContainer'\r\nimport UserContainer from '../User/UserContainer'\r\nimport Home from '../Home/Home'\r\nimport { Route, Switch } from \"react-router-dom\"\r\n\r\nconst App = (props) => {\r\n    return (\r\n        <main className=\"container py-5\">\r\n            <Switch>\r\n                <Route\r\n                    path='/profiles/:userId'\r\n                    render={() => <UserContainer />}\r\n                />\r\n\r\n                <Route\r\n                    path='/profiles'\r\n                    render={() => <ProfilesContainer />}\r\n                />\r\n\r\n                <Route\r\n                    path='/'\r\n                    exact\r\n                    render={() => <Home />}\r\n                />\r\n\r\n\r\n                <Route\r\n                    render={() => <NotFound />}\r\n                />\r\n\r\n            </Switch>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './scss/index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider } from \"react-redux\"\nimport store from \"./redux/redux-store\"\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport App from './components/App/App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename=\"/react-profile-test-app\">\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}